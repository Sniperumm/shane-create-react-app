{"version":3,"sources":["pages/home/logo.svg","components/scroll-to-top/ScrollToTop.tsx","pages/home/Home.tsx","app/App.tsx","app/reducer.ts","rootReducer.ts","configureStore.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","ScrollToTop","children","location","useLocation","useState","previousLocation","setPreviousLocation","useEffect","window","scrollTo","Home","className","src","logo","alt","href","target","rel","App","path","exact","component","initialState","reducer","state","action","type","rootReducer","history","combineReducers","app","appReducer","router","connectRouter","createBrowserHistory","middleware","applyMiddleware","routerMiddleware","Boolean","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,6LCsB5BC,EAdK,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,SACfC,EAAWC,cADqC,EAENC,qBAFM,mBAE/CC,EAF+C,KAE7BC,EAF6B,KAWtD,OAPAC,qBAAU,WACJF,IAAqBH,IACvBI,EAAoBJ,GACpBM,OAAOC,SAAS,EAAG,MAEpB,CAACJ,EAAkBH,IAEf,oCAAGD,I,yBCMGS,MAnBf,WACE,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,yDADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,iBCOSC,EAdH,WACV,IAAMhB,EAAWC,cAEjB,OACE,kBAAC,EAAD,KACE,8BACE,kBAAC,IAAD,CAAQD,SAAUA,GAChB,kBAAC,IAAD,CAAOiB,KAAK,IAAIC,OAAK,EAACC,UAAWX,Q,sBCV9BY,G,MAAyB,IAEvB,SAASC,IAIX,IAHXC,EAGU,uDAHQF,EAElBG,EACU,uCAGN,OAFIA,EAAOC,KAEJF,ECDb,IAMeG,EANK,SAACC,GAAD,OAClBC,0BAAgB,CACdC,IAAKC,EACLC,OAAQC,YAAcL,MCPbA,EAAUM,cAGnBC,EAAaC,0BAAgBC,YAAiBT,ICE9BU,QACW,cAA7B9B,OAAON,SAASqC,UAEe,UAA7B/B,OAAON,SAASqC,UAEhB/B,OAAON,SAASqC,SAASC,MACvB,2DCDN,IAAMC,EFDeC,sBAAYf,EAAYC,GAAU,GAAIO,GEG3DQ,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,IAAD,CAAQb,QAASA,GACf,kBAAC,EAAD,QAGJiB,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0d36365b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { Location } from 'history';\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\ninterface ScrollToTopProps {\n  children?: React.ReactNode;\n}\n\nconst ScrollToTop = ({ children }: ScrollToTopProps) => {\n  const location = useLocation();\n  const [previousLocation, setPreviousLocation] = useState<Location>();\n\n  useEffect(() => {\n    if (previousLocation !== location) {\n      setPreviousLocation(location);\n      window.scrollTo(0, 0);\n    }\n  }, [previousLocation, location]);\n\n  return <>{children}</>;\n};\n\nexport default ScrollToTop;\n","import './Home.css';\n\nimport React from 'react';\n\nimport logo from './logo.svg';\n\nfunction Home() {\n  return (\n    <div className=\"Home\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <p>\n        Edit <code>src/pages/home/Home.tsx</code> and save to reload.\n      </p>\n      <a\n        className=\"App-link\"\n        href=\"https://reactjs.org\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Learn React\n      </a>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { Route, Switch, useLocation } from 'react-router-dom';\n\nimport ScrollToTop from '../components/scroll-to-top/ScrollToTop';\nimport Home from '../pages/home/Home';\n\nconst App = () => {\n  const location = useLocation();\n\n  return (\n    <ScrollToTop>\n      <main>\n        <Switch location={location}>\n          <Route path=\"/\" exact component={Home} />\n        </Switch>\n      </main>\n    </ScrollToTop>\n  );\n};\n\nexport default App;\n","/* eslint-disable-next-line @typescript-eslint/no-empty-interface */\nexport interface AppState {}\n\nexport const initialState: AppState = {};\n\nexport default function reducer(\n  state: AppState = initialState,\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  action: any\n): AppState {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n","import { RouterState, connectRouter } from 'connected-react-router';\nimport { History } from 'history';\nimport { combineReducers } from 'redux';\n\nimport appReducer, { AppState } from './app/reducer';\n\nexport interface GlobalState {\n  app: AppState;\n  router: RouterState;\n}\n\nconst rootReducer = (history: History) =>\n  combineReducers({\n    app: appReducer,\n    router: connectRouter(history),\n  });\n\nexport default rootReducer;\n","import { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer from './rootReducer';\n\nexport const history = createBrowserHistory();\n\nconst dev = process.env.NODE_ENV !== 'production';\nlet middleware = applyMiddleware(routerMiddleware(history));\n\nif (dev) {\n  middleware = composeWithDevTools(middleware);\n}\n\nexport default () => createStore(rootReducer(history), {}, middleware);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\n\nimport { ConnectedRouter as Router } from 'connected-react-router';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './app/App';\nimport configureStore, { history } from './configureStore';\nimport * as serviceWorker from './serviceWorker';\n\n// Add ES6 Map support for redux-devtools-extension\n// See: https://github.com/zalmoxisus/redux-devtools-extension/issues/124\nif (process.env.NODE_ENV !== 'production') {\n  require('map.prototype.tojson');\n}\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}